#!/usr/bin/env bash

BTLG_GDRIVE="1TZW9mUQus3nvMG90od3Y4zG7htdBOZw0"
BTLG_DIR="$HOME/bootleg"

params() {
    while [[ $# -ge 1 ]]; do
        case $1 in
            -b|--build-type)
                shift
                BUILDTYPE="$1"
                ;;
            -c|--clean)
                CLEAN=true
                ;;
            -d|--device)
                shift
                DEVICE="$1"
                ;;
            -j|--jobs)
                shift
                JOBS="$1"
                ;;
            -m|--message)
                shift
                MESSAGE="$1"
                ;;
            -n|--notify)
                shift
                NOTIFY+=" $1"
                ;;
            -r|--repo-sync)
                SYNC=true
                ;;
            -t|--target)
                shift
                case $1 in
                    kernel)
                        TARGET=kernel
                        ;;
                    bl)
                        TARGET=rom
                        ;;
                esac
        esac
    shift
    done
}

[[ -z $JOBS ]] && JOBS="30"
[[ -z $DEVICE ]] && DEVICE="sailfish"

build-kernel() {
    AK2_DIR="$HOME/ak2"

    [[ -z $CROSS_COMPILE ]] && \
        export CROSS_COMPILE="$BTLG_DIR/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin/aarch64-linux-android-"
    [[ -z $CROSS_COMPILE_ARM32 ]] && \
        export CROSS_COMPILE_ARM32="$BTLG_DIR/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/bin/arm-linux-androideabi-"
    if [[ -z $CC ]]; then
        CLANG=$(grep -r "TARGET_KERNEL_CLANG_VERSION" $BTLG_DIR/device/*/* | cut -d ' ' -f 3)
        CLANG=$(grep -r $CLANG $BTLG_DIR/prebuilts/clang/host/linux-x86/*/AndroidVersion.txt | cut -d : -f 1)
        CLANG=$(dirname $CLANG)
        CLANG="$CLANG/bin/clang"
        [[ -n $CLANG ]] && export CC="$CLANG"
    fi
    [[ -z $CLANG_TRIPLE && -n $CC ]] && export CLANG_TRIPLE=aarch64-linux-gnu-
    [[ -z $ARCH ]] && export ARCH=arm64

    cd $BTLG_DIR/kernel/google/marlin

    [[ -n $CLEAN ]] && make mrproper

    tg_notify "BootleggersROM kernel build for $DEVICE started."    #TODO: come up with a device family thing
    BUILDTIME=$(elapsed)
    make O=out bootleg_defconfig |& tee /tmp/build.log
    if make O=out CC="$CC" -j $JOBS |& tee -a /tmp/build.log; then
        BUILDTIME=$(elapsed $BUILDTIME)
        rm -rf $AK2_DIR/kernel/* $AK2_DIR/dtbs/* $AK2_DIR/Bootleg*.zip
        cp out/arch/arm64/boot/Image.lz4 $AK2_DIR/kernel/.
        cp out/arch/arm64/boot/dts/htc/*.dtb $AK2_DIR/dtbs/.
        cd $AK2_DIR
        KERNELZIP="BootleggersROM-kernel-$(date +%m%d-%H%M).zip"
        zip -r9 $KERNELZIP *
        if gdrive-ul $BTLG_GDRIVE $KERNELZIP; then
            tg_notify "$(echo "BootleggersROM kernel build for $DEVICE successful!%0A" \
                "- Build time: $BUILDTIME%0A - Upload time: $ULTIME" \
                "%0A - Download: [gdrive]($DLURL)")"
        else
            tg_notify "$(echo "BootleggersROM kernel build for $DEVICE successful!%0A" \
                "- Build time: $BUILDTIME%0A - Upload time: Upload failed!")"
        fi
    else
        tg_notify "$(echo "BootleggersROM kernel build for $DEVICE failed!%0A" \
            "- Elapsed time: $BUILDTIME%0A")"
    fi


}


build-rom() {
    cd $BTLG_DIR

    [[ -z $BUILDTYPE ]] && BUILDTYPE="user"
    [[ -n $CLEAN ]] && make clobber
    [[ -n $SYNC ]] && reposync

    # clone repos if they aren't there for marlin/sailfish
    if [[ $DEVICE = marlin || $DEVICE = sailfish ]]; then
        for i in "kernel_google_marlin" "device_google_marlin" "vendor_google"; do
            DIR=$(sed -n 's/_/\//gp' <<< $i)
            if [[ ! -d $DIR ]]; then
                git clone https://github.com/BootleggersROM-devices/$i -b pasta $DIR
            fi
        done
    fi

    # make sure kernel directory is clean before building
    [[ -f kernel/google/marlin/.config ]] && ( cd kernel/google/marlin; make mrproper )

    BUILDTIME=$(elapsed)
    . build/envsetup.sh
    lunch bootleg_$DEVICE-$BUILDTYPE
    if [[ -z $MESSAGE ]]; then
        tg_notify "BootleggersROM build for $DEVICE started"
    else
        tg_notify "BootleggersROM build for $DEVICE started%0A - Notes for this build:%0A$MESSAGE"
    fi
    make bacon -j$JOBS |& tee /tmp/build.log
    BUILDSTATUS=${PIPESTATUS[0]}
    if [[ $BUILDSTATUS = 141 ]]; then
        tg_notify "BootleggersROM build for $DEVICE aborted!%0A - Elapsed time: $(elapsed $BUILDTIME)"
    elif [[ $BUILDSTATUS != 0 ]]; then
        for i in "FAILED" "ninja: error" "make:.*Stop."; do
            if [[ -n $(cat /tmp/build.log | sed -ne '/'"$i"'/,/\[ [0-9]/{ /\[ [0-9]/d; p }') ]]; then
                ERROR=$(cat /tmp/build.log | sed -ne '/'"$i"'/,/\[ [0-9]/{ /\[ [0-9]/d; p }')
            fi
        done
        DDLINK=$(deldog "$ERROR")
        if [[ -z $ERROR ]]; then
            tg_notify "BootleggersROM build for $DEVICE failed.%0A - Elapsed time: $(elapsed $BUILDTIME)"
        else
            tg_notify "BootleggersROM build for $DEVICE failed.%0A - Error: [del.dog]($DDLINK)%0A - Elapsed time: $(elapsed $BUILDTIME)"
        fi
        exit 1
    else
        BUILDTIME=$(elapsed $BUILDTIME)
        BUILDZIP=$(ls out/target/product/$DEVICE/BootleggersROM*.zip | sort | tail -n 1)
        if gdrive-ul $BTLG_GDRIVE $BUILDZIP; then
            tg_notify "$(echo "BootleggersROM build for $DEVICE successful!%0A" \
                "- Build time: $BUILDTIME%0A - Upload time: $ULTIME" \
                "%0A - Download: [gdrive]($DLURL)")"
        else
            tg_notify "$(echo "BootleggersROM build for $DEVICE successful!%0A" \
                "- Build time: $BUILDTIME%0A - Upload time: Upload failed!")"
        fi
    fi
}

gdrive-ul() {
    ULTIME=$(elapsed)
    if gdrive upload --parent $1 $2; then
        ULTIME=$(elapsed $ULTIME)
        DLURL=($(gdrive info $(gdrive list --order "modifiedTime desc" -m 1 \
            | tail -n 1 | cut -d' ' -f 1) | sed -n 's/DownloadUrl: //p'))
    else
        return 1
    fi
}

# function to only notify if notifications are enabled
tg_notify() {
    [[ -z $NOTIFY ]] && return 0
    for i in $NOTIFY; do
        tg_bot -m "@$(whoami): $1" -p "$i"
    done
}

params "${@}"
if [[ $TARGET = rom ]]; then
    build-rom
elif [[ $TARGET = kernel ]]; then
    build-kernel
fi
