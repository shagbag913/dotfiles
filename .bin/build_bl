#!/usr/bin/env bash

BTLG_GDRIVE="1TZW9mUQus3nvMG90od3Y4zG7htdBOZw0"
BTLG_DIR="$HOME/btlg"

params() {
    while [[ $# -ge 1 ]]; do
        case $1 in
            -nc|--no-clean)
                NOCLEAN=true
                ;;
            -d|--device)
                shift
                DEVICE="$1"
                ;;
            -m|--message)
                shift
                MESSAGE+=" - $1%0A"
                ;;
            -n|--notify)
                shift
                NOTIFY+=" $1"
                ;;
            -t|--target)
                shift
                TARGET=$1
                ;;
            -nu|--no-upload)
                NO_UPLOAD=true
                ;;
        esac
    shift
    done
}

build-kernel() {
    AK2_DIR="$HOME/ak2"

    if [[ -z $CLANG ]]; then
        # Default to the highest Clang version
        CLANG="$BTLG/prebuilts/clang/host/linux-x86/$(ls $BLTG_DIR/prebuilts/clang/host/linux-x86 | \
                grep "clang-r" | sort | tail -n 1)/bin/clang"
    fi

    if [[ -z $CROSS_COMPILE ]]; then
        CROSS_COMPILE="$BTLG_DIR/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin/aarch64-linux-android-"
    fi
    if [[ -z $CROSS_COMPILE_ARM32 ]]; then
        CROSS_COMPILE_ARM32="$BTLG_DIR/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/bin/arm-linux-androideabi-"
    fi

    cd $BTLG_DIR/kernel/google/marlin
    tg_notify "BootleggersROM kernel build for $DEVICE started.%0A$MESSAGE"

    make mrproper
    make bootleg_defconfig ARCH=arm64 |& tee /tmp/build.log

    BUILDTIME=$(elapsed)
    make -j $MAKEFLAGS CC="ccache $CLANG" ARCH=arm64 CLANG_TRIPLE=aarch64-linux-gnu- \
        CROSS_COMPILE="$CROSS_COMPILE" \
        CROSS_COMPILE_ARM32="$CROSS_COMPILE_ARM32" \
        |& tee -a /tmp/build.log

    pipe_error
    BUILDTIME=$(elapsed $BUILDTIME)
    if [[ $ERRNO = 130 ]]; then
        TG_MSG="BootleggersROM kernel build for $DEVICE aborted!%0A - Elapsed time: $BUILDTIME"
    elif [[ $ERRNO = 1 ]]; then
        TG_MSG="BootleggersROM kernel build for $DEVICE failed.%0A - Elapsed time: $BUILDTIME"
        [[ -n $DDLINK ]] && TG_MSG+="%0A - Error: [del.dog]($DDLINK)"
    else
        rm -rf $AK2_DIR/kernel/* $AK2_DIR/dtbs/* $AK2_DIR/Bootleg*.zip
        cp arch/arm64/boot/Image.lz4 $AK2_DIR/kernel/.
        cp arch/arm64/boot/dts/htc/*.dtb $AK2_DIR/dtbs/.
        cd $AK2_DIR
        KERNELZIP="BootleggersROM-kernel-$(date +%m%d-%H%M).zip"
        zip -r9 $KERNELZIP *
        gdrive-ul $BTLG_GDRIVE $KERNELZIP
        TG_MSG=$(echo "BootleggersROM kernel build for $DEVICE successful!%0A$MESSAGE" \
            "- Build time: $BUILDTIME%0A - $ULSTAT")
    fi
    tg_notify "$TG_MSG"
}


build-rom() {
    BUILDTYPE="user"

    cd $BTLG_DIR

    # make sure kernel directory is clean
    if [[ -f kernel/google/marlin/.config ]]; then
        (
            cd kernel/google/marlin
            make mrproper
        )
    fi

    # check if ccache is cleared
    if [[ $(ccache -s | sed -n 's/files in cache.* //p') = 0 ]]; then
        MESSAGE+=" - ccache cleared! This build will take longer than usual.%0A"
    fi

    . build/envsetup.sh
    lunch bootleg_$DEVICE-$BUILDTYPE
    [[ -z $NOCLEAN ]] && make clobber

    # short way to notify of target we are building
    [[ $TARGET = bacon ]] && MSG_TGT=" " || MSG_TGT=" $TARGET "
    tg_notify "BootleggersROM${MSG_TGT}build for $DEVICE started%0A$MESSAGE"

    BUILDTIME=$(elapsed)
    make $TARGET -j$MAKEFLAGS |& tee /tmp/build.log
    pipe_error
    BUILDTIME=$(elapsed $BUILDTIME)
    if [[ $ERRNO = 130 ]]; then
        TG_MSG="BootleggersROM${MSG_TGT}build for $DEVICE aborted!%0A - Elapsed time: $BUILDTIME"
    elif [[ $ERRNO = 1 ]]; then
        TG_MSG="BootleggersROM${MSG_TGT}build for $DEVICE failed.%0A - Elapsed time: $BUILDTIME"
        [[ -n $DDLINK ]] && TG_MSG="$TG_MSG%0A - Error: [del.dog]($DDLINK)"
    else
        if [[ $TARGET = bacon ]]; then
            OUTPUT=$(ls out/target/product/$DEVICE/BootleggersROM*.zip | sort | tail -n 1)
        else
            OUTPUT=$(cat /tmp/build.log | sed -n 's/\[.*%.*\] Install: //p' | tail -n 1)
        fi
        gdrive-ul $BTLG_GDRIVE $OUTPUT
        TG_MSG=$(echo "BootleggersROM build for $DEVICE successful!%0A$MESSAGE" \
            "- Build time: $BUILDTIME%0A - $ULSTAT")
    fi
    tg_notify "$TG_MSG"
}

pipe_error() {
    STATUS=${PIPESTATUS[0]}
    if [[ $STATUS = 141 ]]; then
        ERRNO=130
    elif [[ $STATUS != 0 ]]; then
        for i in "FAILED" "ninja: error" "make:.*Stop." "fatal error:"; do
            if [[ -n $(cat /tmp/build.log | sed -ne '/'"$i"'/,$p' | head -n 100) ]]; then
                ERROR=$(cat /tmp/build.log | sed -ne '/'"$i"'/,$p' | head -n 100)
            fi
        done
        [[ -n $ERROR ]] && DDLINK=$(deldog "$ERROR")
        ERRNO=1
    fi
}

gdrive-ul() {
    if [[ -n $NO_UPLOAD ]]; then
        ULSTAT="Upload skipped"
        return 0
    fi
    ULTIME=$(elapsed)
    if trythree gdrive upload --parent $1 $2; then
        ULTIME=$(elapsed $ULTIME)
        for i in $(seq 3); do
            DLURL=($(trythree gdrive info $(gdrive list --order "modifiedTime desc" -m 1 \
                | tail -n 1 | cut -d' ' -f 1) | sed -n 's/DownloadUrl: //p'))
            [[ -n $DLURL ]] && break
            sleep 2
        done
        ULSTAT="Upload time: $ULTIME%0A - Download: [gdrive]($DLURL)"
    else
        ULSTAT="Upload failed!"
    fi
}

# function to only notify if notifications are enabled
tg_notify() {
    [[ -z $NOTIFY ]] && return 0
    for i in $NOTIFY; do
        tg_bot -m "$1" -p "$i"
    done
}

params "${@}"

# DEFAULTS
[[ -z $MAKEFLAGS ]] && MAKEFLAGS="$(nproc --all)"
[[ -z $DEVICE ]] && DEVICE=sailfish
[[ -z $TARGET ]] && TARGET=bacon
[[ $TARGET = kernel ]] && build-kernel || build-rom
