#!/usr/bin/env bash

BTLG_GDRIVE="1TZW9mUQus3nvMG90od3Y4zG7htdBOZw0"
BTLG_DIR="$HOME/bootleg"

params() {
    while [[ $# -ge 1 ]]; do
        case $1 in
            -b|--build-type)
                shift
                BUILDTYPE="$1"
                ;;
            -c|--clean)
                CLEAN=true
                ;;
            -d|--device)
                shift
                DEVICE="$1"
                ;;
            -j|--jobs)
                shift
                JOBS="$1"
                ;;
            -m|--message)
                shift
                MESSAGE+=" - $1%0A"
                ;;
            -n|--notify)
                shift
                NOTIFY+=" $1"
                ;;
            -t|--target)
                shift
                if [[ $1 = kernel ]]; then
                    TARGET=kernel
                elif [[ -n $1 ]]; then
                    TARGET=$1
                fi
                ;;
        esac
    shift
    done
}

build-kernel() {
    AK2_DIR="$HOME/ak2"

    [[ -z $CROSS_COMPILE ]] && \
        export CROSS_COMPILE="$BTLG_DIR/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin/aarch64-linux-android-"
    [[ -z $CROSS_COMPILE_ARM32 ]] && \
        export CROSS_COMPILE_ARM32="$BTLG_DIR/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/bin/arm-linux-androideabi-"
    if [[ -z $CC ]]; then
        CLANG=$(grep -r "TARGET_KERNEL_CLANG_VERSION" $BTLG_DIR/device/*/* | cut -d ' ' -f 3)
        CLANG=$(grep -r $CLANG $BTLG_DIR/prebuilts/clang/host/linux-x86/*/AndroidVersion.txt | cut -d : -f 1)
        CLANG=$(dirname $CLANG)
        CLANG="$CLANG/bin/clang"
        [[ -n $CLANG ]] && export CC="$CLANG"
    fi
    [[ -z $CLANG_TRIPLE && -n $CC ]] && export CLANG_TRIPLE=aarch64-linux-gnu-
    [[ -z $ARCH ]] && export ARCH=arm64

    cd $BTLG_DIR/kernel/google/marlin

    [[ -n $CLEAN ]] && make mrproper

    tg_notify "BootleggersROM kernel build for $DEVICE started."    #TODO: come up with a device family thing
    BUILDTIME=$(elapsed)
    make O=out bootleg_defconfig |& tee /tmp/build.log
    make O=out CC="ccache $CC" -j $JOBS |& tee -a /tmp/build.log
    pipe_error
    BUILDTIME=$(elapsed $BUILDTIME)
    if [[ $ERRNO = 130 ]]; then
        tg_notify "BootleggersROM kernel build for $DEVICE aborted!%0A - Elapsed time: $BUILDTIME"
    elif [[ $ERRNO = 1 ]]; then
        if [[ -z $DDLINK ]]; then
            tg_notify "BootleggersROM kernel build for $DEVICE failed.%0A - Elapsed time: $BUILDTIME"
        else
            tg_notify "BootleggersROM kernel build for $DEVICE failed.%0A - Error: [del.dog]($DDLINK)%0A - Elapsed time: $BUILDTIME"
        fi
    else
        rm -rf $AK2_DIR/kernel/* $AK2_DIR/dtbs/* $AK2_DIR/Bootleg*.zip
        cp out/arch/arm64/boot/Image.lz4 $AK2_DIR/kernel/.
        cp out/arch/arm64/boot/dts/htc/*.dtb $AK2_DIR/dtbs/.
        cd $AK2_DIR
        KERNELZIP="BootleggersROM-kernel-$(date +%m%d-%H%M).zip"
        zip -r9 $KERNELZIP *
        if gdrive-ul $BTLG_GDRIVE $KERNELZIP; then
            tg_notify "$(echo "BootleggersROM kernel build for $DEVICE successful!%0A" \
                "- Build time: $BUILDTIME%0A - Upload time: $ULTIME" \
                "%0A - Download: [gdrive]($DLURL)")"
        else
            tg_notify "$(echo "BootleggersROM kernel build for $DEVICE successful!%0A" \
                "- Build time: $BUILDTIME%0A - Upload time: Upload failed!")"
        fi
    fi
}


build-rom() {
    cd $BTLG_DIR

    [[ -z $BUILDTYPE ]] && BUILDTYPE="userdebug"
    [[ -n $CLEAN ]] && make clobber

    # clone repos if they aren't there for marlin/sailfish
    if [[ $DEVICE = marlin || $DEVICE = sailfish ]]; then
        for i in "kernel_google_marlin" "device_google_marlin" "vendor_google"; do
            DIR=$(sed -n 's/_/\//gp' <<< $i)
            if [[ ! -d $DIR ]]; then
                git clone https://github.com/BootleggersROM-devices/$i -b pasta $DIR
            fi
        done
    fi

    # make sure kernel directory is clean before building
    [[ -f kernel/google/marlin/.config ]] && ( cd kernel/google/marlin; make mrproper )

    BUILDTIME=$(elapsed)
    . build/envsetup.sh
    lunch bootleg_$DEVICE-$BUILDTYPE

    # short way to notify of target we are building
    if [[ $TARGET = bacon ]]; then
        MSG_TGT=" "
    else
        MSG_TGT=" $TARGET "
    fi

    if [[ -z $MESSAGE ]]; then
        tg_notify "BootleggersROM${TGT_MSG}build for $DEVICE started"
    else
        tg_notify "BootleggersROM${TGT_MSG}build for $DEVICE started%0ANotes for this build:%0A$MESSAGE"
    fi
    make $TARGET -j$JOBS |& tee /tmp/build.log
    pipe_error
    BUILDTIME=$(elapsed $BUILDTIME)
    if [[ $ERRNO = 130 ]]; then
        tg_notify "BootleggersROM${TGT_MSG}build for $DEVICE aborted!%0A - Elapsed time: $BUILDTIME"
    elif [[ $ERRNO = 1 ]]; then
        if [[ -z $DDLINK ]]; then
            tg_notify "BootleggersROM${TGT_MSG}build for $DEVICE failed.%0A - Elapsed time: $BUILDTIME"
        else
            tg_notify "BootleggersROM${TGT_MSG}build for $DEVICE failed.%0A - Error: [del.dog]($DDLINK)%0A - Elapsed time: $BUILDTIME"
        fi
        exit 1
    else
        if [[ $TARGET = bacon ]]; then
            OUTPUT=$(ls out/target/product/$DEVICE/BootleggersROM*.zip | sort | tail -n 1)
        else
            OUTPUT=$(cat /tmp/build.log | sed -n 's/\[.*100%.*\] Install: //p')
        fi
        if gdrive-ul $BTLG_GDRIVE $OUTPUT; then
            tg_notify "$(echo "BootleggersROM${TGT_MSG}build for $DEVICE successful!%0A" \
                "- Build time: $BUILDTIME%0A - Upload time: $ULTIME" \
                "%0A - Download: [gdrive]($DLURL)")"
        else
            tg_notify "$(echo "BootleggersROM${TGT_MSG}build for $DEVICE successful!%0A" \
                "- Build time: $BUILDTIME%0A - Upload time: Upload failed!")"
        fi
    fi
}

pipe_error() {
    STATUS=${PIPESTATUS[0]}
    if [[ $STATUS = 141 ]]; then
        ERRNO=130
    elif [[ $STATUS != 0 ]]; then
        for i in "FAILED" "ninja: error" "make:.*Stop." "fatal error:"; do
            if [[ -n $(cat /tmp/build.log | sed -ne '/'"$i"'/,$p' | head -n 100) ]]; then
                ERROR=$(cat /tmp/build.log | sed -ne '/'"$i"'/,$p' | head -n 100)
            fi
        done
        [[ -n $ERROR ]] && DDLINK=$(deldog "$ERROR")
        ERRNO=1
    fi
}

gdrive-ul() {
    ULTIME=$(elapsed)
    if gdrive upload --parent $1 $2; then
        ULTIME=$(elapsed $ULTIME)
        DLURL=($(gdrive info $(gdrive list --order "modifiedTime desc" -m 1 \
            | tail -n 1 | cut -d' ' -f 1) | sed -n 's/DownloadUrl: //p'))
    else
        return 1
    fi
}

# function to only notify if notifications are enabled
tg_notify() {
    [[ -z $NOTIFY ]] && return 0
    for i in $NOTIFY; do
        tg_bot -m "@$(whoami): $1" -p "$i"
    done
}

params "${@}"
# DEFAULTS
[[ -z $JOBS ]] && JOBS=30
[[ -z $DEVICE ]] && DEVICE=sailfish
[[ -z $TARGET ]] && TARGET=bacon
[[ -z $NOTIFY ]] && NOTIFY=nug
if [[ $TARGET = kernel ]]; then
    build-kernel
else
    build-rom
fi
