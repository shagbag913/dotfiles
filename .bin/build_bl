#!/usr/bin/env bash

BTLG_GDRIVE="1TZW9mUQus3nvMG90od3Y4zG7htdBOZw0"
BTLG_DIR="$HOME/bootleg"

params() {
    while [[ $# -ge 1 ]]; do
        case $1 in
            -c|--clean)
                CLEAN=true
                ;;
            -d|--device)
                shift
                DEVICE="$1"
                ;;
            -j|--jobs)
                shift
                JOBS="$1"
                ;;
            -m|--message)
                shift
                MESSAGE+=" - $1%0A"
                ;;
            -n|--notify)
                shift
                NOTIFY+=" $1"
                ;;
            -t|--target)
                shift
                if [[ $1 = kernel ]]; then
                    TARGET=kernel
                elif [[ -n $1 ]]; then
                    TARGET=$1
                fi
                ;;
        esac
    shift
    done
}

prep() {
    BRANCH=pasta
    if [[ ! -d $BTLG_DIR/vendor/bootleggers ]]; then
        [[ -d $BTLG_DIR ]] || mkdir $BTLG_DIR
        cd $BTLG_DIR
        repo init -u https://github.com/BootleggersROM/manifest -b $BRANCH
        trythree reposync || exit 1
    fi
    if [[ -d $BTLG_DIR/vendor/bootleggers ]]; then
        for i in vendor/google_devices kernel/google/marlin device/google/marlin; do
            if [[ ! -d $BTLG_DIR/$i ]]; then
                git clone https://github.com/BootleggersROM-devices/$(sed -n 's/\//_/gp' <<< $i) -b $BRANCH $BTLG_DIR/$i || exit 1
            fi
        done
    fi
}

build-kernel() {
    AK2_DIR="$HOME/ak2"

    # find clang version
    CLANGV=$(grep -r "TARGET_KERNEL_CLANG_VERSION" $BTLG_DIR/device/*/* | cut -d ' ' -f 3)
    CLANG=$(grep -r $CLANGV $BTLG_DIR/prebuilts/clang/host/linux-x86/*/AndroidVersion.txt | cut -d : -f 1)
    CLANG=$(dirname $CLANG)
    CLANG="$CLANG/bin/"

    if [[ -z $CROSS_COMPILE ]]; then
        CROSS_COMPILE="$BTLG_DIR/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/bin/aarch64-linux-android-"
    fi
    if [[ -z $CROSS_COMPILE_ARM32 ]]; then
        CROSS_COMPILE_ARM32="$BTLG_DIR/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/bin/arm-linux-androideabi-"
    fi

    cd $BTLG_DIR/kernel/google/marlin

    TG_MSG="BootleggersROM kernel build for $DEVICE started."
    [[ -n $MESSAGE ]] && TG_MSG="$TG_MSG%0A$MESSAGE"

    make mrproper
    make bootleg_defconfig ARCH=arm64 |& tee /tmp/build.log
    BUILDTIME=$(elapsed)
    if [[ -n $CLANG && -z $NO_CLANG ]]; then
        tg_notify "$TG_MSG%0A - Built with Clang $CLANGV"
        make -j $JOBS CC="ccache $CLANG/clang" ARCH=arm64 CLANG_TRIPLE=aarch64-linux-gnu- \
            CROSS_COMPILE="$CROSS_COMPILE" \
            CROSS_COMPILE_ARM32="$CROSS_COMPILE_ARM32" \
            |& tee -a /tmp/build.log
    else
        GCCV=$("$CROSS_COMPILE"gcc --version | head -n 1 | cut -d ' ' -f 3)
        tg_notify "$TG_MSG%0A - Built with GCC $GCCV"
        make -j $JOBS ARCH=arm64 \
            CROSS_COMPILE="ccache $CROSS_COMPILE" \
            CROSS_COMPILE_ARM32="ccache $CROSS_COMPILE_ARM32" \
            |& tee -a /tmp/build.log
    fi

    pipe_error
    BUILDTIME=$(elapsed $BUILDTIME)
    if [[ $ERRNO = 130 ]]; then
        TG_MSG="BootleggersROM kernel build for $DEVICE aborted!%0A - Elapsed time: $BUILDTIME"
    elif [[ $ERRNO = 1 ]]; then
        TG_MSG="BootleggersROM kernel build for $DEVICE failed.%0A - Elapsed time: $BUILDTIME"
        [[ -n $DDLINK ]] && TG_MSG="%0A - Error: [del.dog]($DDLINK)"
    else
        rm -rf $AK2_DIR/kernel/* $AK2_DIR/dtbs/* $AK2_DIR/Bootleg*.zip
        cp arch/arm64/boot/Image.lz4 $AK2_DIR/kernel/.
        cp arch/arm64/boot/dts/htc/*.dtb $AK2_DIR/dtbs/.
        cd $AK2_DIR
        KERNELZIP="BootleggersROM-kernel-$(date +%m%d-%H%M).zip"
        zip -r9 $KERNELZIP *
        TG_MSG="BootleggersROM kernel build for $DEVICE successful!%0A - Build time: $BUILDTIME"
        if gdrive-ul $BTLG_GDRIVE $KERNELZIP; then
            TG_MSG="$TG_MSG%0A - Upload time: $ULTIME%0A - Download: [gdrive]($DLURL)"
        else
            TG_MSG="$TG_MSG%0A - Upload time: Upload failed!"
        fi
    fi
    tg_notify "$TG_MSG"
}


build-rom() {
    BUILDTYPE="userdebug"

    cd $BTLG_DIR

    # make sure kernel directory is clean
    if [[ -f kernel/google/marlin/.config ]]; then
        (
            cd kernel/google/marlin
            make mrproper
        )
    fi

    # check if ccache is cleared
    if [[ $(ccache -s | sed -n 's/files in cache.* //p') = 0 ]]; then
        MESSAGE+=" - ccache cleared! This build will take longer than usual."
    fi

    # perform prebuild stuff on supported device
    [[ $DEVICE = marlin || $DEVICE = sailfish ]] && prebuild

    . build/envsetup.sh
    lunch bootleg_$DEVICE-$BUILDTYPE
    [[ -n $CLEAN ]] && make clobber

    # short way to notify of target we are building
    [[ $TARGET = bacon ]] && MSG_TGT=" " || MSG_TGT=" $TARGET "
    tg_notify "BootleggersROM${MSG_TGT}build for $DEVICE started%0A$MESSAGE"

    BUILDTIME=$(elapsed)
    make $TARGET -j$JOBS |& tee /tmp/build.log
    pipe_error
    BUILDTIME=$(elapsed $BUILDTIME)
    if [[ $ERRNO = 130 ]]; then
        TG_MSG="BootleggersROM${MSG_TGT}build for $DEVICE aborted!%0A - Elapsed time: $BUILDTIME"
    elif [[ $ERRNO = 1 ]]; then
        TG_MSG="BootleggersROM${MSG_TGT}build for $DEVICE failed.%0A - Elapsed time: $BUILDTIME"
        [[ -n $DDLINK ]] && TG_MSG="$TG_MSG%0A - Error: [del.dog]($DDLINK)"
    else
        if [[ $TARGET = bacon ]]; then
            OUTPUT=$(ls out/target/product/$DEVICE/BootleggersROM*.zip | sort | tail -n 1)
        else
            OUTPUT=$(cat /tmp/build.log | sed -n 's/\[.*100%.*\] Install: //p')
        fi
        TG_MSG="BootleggersROM${MSG_TGT}build for $DEVICE successful!%0A - Build time: $BUILDTIME"
        if gdrive-ul $BTLG_GDRIVE $OUTPUT; then
            TG_MSG="$TG_MSG%0A - Upload time: $ULTIME%0A - Download: [gdrive]($DLURL)%0A$MESSAGE"
        else
            TG_MSG="$TG_MSG%0A - Upload time: Upload failed!"
        fi
    fi
    tg_notify "$TG_MSG"
    [[ $DEVICE = marlin || $DEVICE = sailfish ]] && postbuild
}

pipe_error() {
    STATUS=${PIPESTATUS[0]}
    if [[ $STATUS = 141 ]]; then
        ERRNO=130
    elif [[ $STATUS != 0 ]]; then
        for i in "FAILED" "ninja: error" "make:.*Stop." "fatal error:"; do
            if [[ -n $(cat /tmp/build.log | sed -ne '/'"$i"'/,$p' | head -n 100) ]]; then
                ERROR=$(cat /tmp/build.log | sed -ne '/'"$i"'/,$p' | head -n 100)
            fi
        done
        [[ -n $ERROR ]] && DDLINK=$(deldog "$ERROR")
        ERRNO=1
    fi
}

gdrive-ul() {
    ULTIME=$(elapsed)
    if trythree gdrive upload --parent $1 $2; then
        ULTIME=$(elapsed $ULTIME)
        DLURL=($(trythree gdrive info $(gdrive list --order "modifiedTime desc" -m 1 \
            | tail -n 1 | cut -d' ' -f 1) | sed -n 's/DownloadUrl: //p'))
    else
        echo "Upload failed!"
    fi
}

# function to only notify if notifications are enabled
tg_notify() {
    [[ -z $NOTIFY ]] && return 0
    for i in $NOTIFY; do
        tg_bot -m "$1" -p "$i"
    done
}

prebuild() {
    echo "Performing pre-build changes"
    sed -i 's/TARGET_KERNEL_CLANG/#TARGET_KERNEL_CLANG/g' device/google/marlin/BoardConfigBootleg.mk
    echo "KERNEL_TOOLCHAIN_PREFIX := aarch64-linux-gnu-" >> device/google/marlin/BoardConfigBootleg.mk
}

postbuild() {
    echo "Reverting pre-build changes"
    sed -i 's/#TARGET_KERNEL_CLANG/TARGET_KERNEL_CLANG/g' device/google/marlin/BoardConfigBootleg.mk
    sed -i 's/KERNEL_TOOLCHAIN_PREFIX.*//' device/google/marlin/BoardConfigBootleg.mk
    perl -pi -e 'chomp if eof' device/google/marlin/BoardConfigBootleg.mk
}

params "${@}"

# DEFAULTS
[[ -z $JOBS ]] && JOBS=$MAKEFLAGS
[[ -z $DEVICE ]] && DEVICE=sailfish
[[ -z $TARGET ]] && TARGET=bacon
[[ -z $NOTIFY ]] && NOTIFY=nug

prep
[[ $TARGET = kernel ]] && build-kernel || build-rom
