#!/usr/bin/env dash
#
# My lemonbar setup.
# IMPORTANT:  This configuration is only compatible with
#             a lemonbar fork with xft font compatibility.
#

# Vertical size in percentage of the bar
BAR_HEIGHT_RATIO=04

# Find bspwm gap ratio
BSPWM_GAP=$(awk '/window_gap/{print $4}' $HOME/.config/bspwm/bspwmrc)
if [ $(echo $BSPWM | wc -l) -gt 1 ]; then BSPWM_GAP=0$BSPWM_GAP; fi

MONITOR_WIDTH=$(xrandr --query | grep ' connected' | grep -o '[0-9][0-9]\+' | sed -n 1p)
MONITOR_HEIGHT=$(xrandr --query | grep ' connected' | grep -o '[0-9][0-9]\+' | sed -n 2p)
BAR_WIDTH=$(echo "$MONITOR_WIDTH - $((BSPWM_GAP * 2))" | bc -l | sed 's/\..*//')
BAR_HEIGHT=$(echo "$MONITOR_HEIGHT * .$BAR_HEIGHT_RATIO" | bc -l | sed 's/\..*//')

FIFO=/tmp/lemonfifo
[ -e $FIFO ] && rm $FIFO
mkfifo $FIFO

# Check if Wi-Fi/Ethernet is available
find /sys/class/net/e* -maxdepth 1 >/dev/null && ETHERNET_AVAILABLE=true
find /sys/class/net/w* -maxdepth 1 >/dev/null && WIFI_AVAILABLE=true

# Check if Intel backlight is in use
find /sys/class/backlight/intel_backlight -maxdepth 1 >/dev/null && INTEL_BACKLIGHT=true
if [ "$INTEL_BACKLIGHT" = true ]; then
    INTEL_MAX_BRIGHTNESS=$(cat /sys/class/backlight/intel_backlight/max_brightness)
fi

# Check if a battery is present
find /sys/class/power_supply/BAT* -maxdepth 1 >/dev/null && BATTERY_AVAILABLE=true

# Check if `amixer` is available
command -v amixer && VOLUME_AVAILABLE=true

bar_date() {
    echo "bar_date$(date '+%I:%M %p' | sed 's/^0//')"
}

battery() {
    local charge=$(cat /sys/class/power_supply/BAT0/capacity)
    local charge_array='    '
    local color
    local glyph

    if [ "$charge" -le 10 ]; then
        glyph=1
        color='#ff0400'
    elif [ "$charge" -lt 20 ]; then
        glyph=1
        color='#ffaead'
    elif [ "$charge" -lt 40 ]; then
        glyph=2
    elif [ "$charge" -lt 70 ]; then
        glyph=3
    elif [ "$charge" -lt 90 ]; then
        glyph=4
    else
        glyph=5
    fi

    set -- $charge_array

    if grep -q Charging /sys/class/power_supply/BAT0/status; then
        if [ "$CHARGING_INDEX" = 5 ] || [ -z "$CHARGING_INDEX" ]; then
            CHARGING_INDEX=$glyph
        else
            CHARGING_INDEX=$((CHARGING_INDEX + 1))
        fi

        eval glyph="\${$CHARGING_INDEX}"
    else
        [ -n "$color" ] && eval glyph="%{F$color}\${$glyph}%{F-}" || eval glyph="\${$glyph}"
    fi

    echo "battery%{A:$HOME/.bin/batteryprompt.py click:}$glyph%{A}"
}

bspwm_windows() {
    local windows
    local index=0
    local IFS=":"
    for i in $(bspc wm --get-status); do
        if [ $index -ge 1 ] && [ $index -le 10 ]; then
            case $i in
                o*)
                    windows="$windows%{A:bspc desktop -f ^$index:}   %{F#80FFFFFF}%{F-}   %{A}"
                ;;
                O*|F*)
                    windows="$windows%{A:bspc desktop -f ^$index:}      %{A}"
                ;;
            esac
        fi
        index=$((index+1))
    done
    echo "bspwm_windows$windows"
}

memory_usage() {
    echo "memory_usage  $(free | awk -F' ' '/Mem/{printf "%3.0f\n",$3/$2*100}' | tr -d ' ')%"
}

network_status() {
    if [ -n "$WIFI_AVAILABLE" ]; then
        local wifi=$(cat /sys/class/net/w*/operstate)
        if [ "$wifi" = up ]; then
            echo "network_status"
            return
        elif [ "$wifi" = down ]; then
            echo "network_status%{F#99FFFFFF}%{F-}"
        fi
    elif [ -n "$ETHERNET_AVAILABLE" ]; then
        local eth=$(cat /sys/class/net/e*/operstate)
        if [ "$eth" = up ]; then
            echo 'network_status'
            return
        fi
    fi
    echo ''
}

get_intel_brightness() {
    local brightness=$(printf "%.0f\n" $(echo "$(light) / 20" | bc -l))
    echo "get_intel_brightness  $(build_slider $brightness 5)"
}

get_volume() {
    local slider
    local current_volume="$(amixer -D pulse get Master | awk -F'[][%]' 'END{print $2,$5}')"
    local is_muted=$(echo "$current_volume" | grep off)
    set -- $current_volume
    current_volume=$(printf "%.0f\n" $(echo "$1 / 20" | bc -l))
    local icon_array='  '

    set -- $icon_array

    if [ -n "$is_muted" ] || [ $current_volume = 0 ]; then
        glyph=$1
    elif [ $current_volume -le 2 ]; then
        glyph=$2
    else
        glyph=$3
    fi

    echo "get_volume$glyph  $(build_slider $current_volume 5)"
}

build_slider() {
    for i in $(seq $1); do
        printf "%s" "—"
    done
    printf "%s" "|"
    for i in $(seq $(($2 - $1))); do
        printf "%s" "—"
    done
}

seperate() {
    local items
    for i in "$@"; do
        [ -z "$i" ] && continue
        items="$items    |    $i"
    done
    echo "$items" | sed 's/ \+|//'
}

while :; do bar_date; sleep 10; done > $FIFO &
while :; do memory_usage; sleep 10; done > $FIFO &
while :; do bspwm_windows; sleep .15; done > $FIFO &
while :; do network_status; sleep 15; done > $FIFO &

# Only run if amixer is available
if [ "$VOLUME_AVAILABLE" = true ]; then
    while :; do get_volume; sleep .6; done > $FIFO &
fi

# Only run this if intel backlight is in use
if [ "$INTEL_BACKLIGHT" = true ]; then
    while :; do get_intel_brightness; sleep .6; done > $FIFO &
fi

# Only run this if the device has a battery
if [ "$BATTERY_AVAILABLE" = true ]; then
    while :; do battery; sleep 2; done > $FIFO &
fi

while read -r line; do
    case $line in
        memory_usage*)
            MEMORY_USAGE=$(echo "$line" | tail -c+13)
            ;;
        bar_date*)
            DATE=$(echo "$line" | tail -c+9)
            ;;
        battery*)
            BATTERY=$(echo "$line" | tail -c+8)
            ;;
        bspwm_windows*)
            BSPWM_WINDOWS=$(echo "$line" | tail -c+14)
            ;;
        network_status*)
            NETWORK_STATUS=$(echo "$line" | tail -c+15)
            ;;
        get_intel_brightness*)
            INTEL_BRIGHTNESS=$(echo "$line" | tail -c+21)
            ;;
        get_volume*)
            VOLUME=$(echo "$line" | tail -c+11)
            ;;
    esac
    echo "%{l}$(seperate "$DATE")%{c}$BSPWM_WINDOWS%{r}$(seperate "$VOLUME" "$INTEL_BRIGHTNESS" "$MEMORY_USAGE" "$NETWORK_STATUS" "$BATTERY")    "
done < $FIFO | lemonbar \
            -f 'Font Awesome 5 Free Solid:style=Solid' \
            -f 'SF Pro Display:style=Bold:size=10' \
            -g "$BAR_WIDTH"x"$BAR_HEIGHT"+"$BSPWM_GAP"+"$((BSPWM_GAP / 2))" \
            -B '#141b35' \
            -p | dash
